// Code generated by MockGen. DO NOT EDIT.
// Source: src/model/service/user_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	rest_err "github.com/Ricardolv/mvc-api/src/config/rest_err"
	model "github.com/Ricardolv/mvc-api/src/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserDomainService is a mock of UserDomainService interface.
type MockUserDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockUserDomainServiceMockRecorder
}

// MockUserDomainServiceMockRecorder is the mock recorder for MockUserDomainService.
type MockUserDomainServiceMockRecorder struct {
	mock *MockUserDomainService
}

// NewMockUserDomainService creates a new mock instance.
func NewMockUserDomainService(ctrl *gomock.Controller) *MockUserDomainService {
	mock := &MockUserDomainService{ctrl: ctrl}
	mock.recorder = &MockUserDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDomainService) EXPECT() *MockUserDomainServiceMockRecorder {
	return m.recorder
}

// CreateService mocks base method.
func (m *MockUserDomainService) CreateService(arg0 model.UserDomainInterface) (model.UserDomainInterface, *rest_err.RestErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(*rest_err.RestErr)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockUserDomainServiceMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockUserDomainService)(nil).CreateService), arg0)
}

// DeleteService mocks base method.
func (m *MockUserDomainService) DeleteService(arg0 string) *rest_err.RestErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(*rest_err.RestErr)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockUserDomainServiceMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockUserDomainService)(nil).DeleteService), arg0)
}

// FindByEmailService mocks base method.
func (m *MockUserDomainService) FindByEmailService(email string) (model.UserDomainInterface, *rest_err.RestErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmailService", email)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(*rest_err.RestErr)
	return ret0, ret1
}

// FindByEmailService indicates an expected call of FindByEmailService.
func (mr *MockUserDomainServiceMockRecorder) FindByEmailService(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmailService", reflect.TypeOf((*MockUserDomainService)(nil).FindByEmailService), email)
}

// FindByIDService mocks base method.
func (m *MockUserDomainService) FindByIDService(id string) (model.UserDomainInterface, *rest_err.RestErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDService", id)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(*rest_err.RestErr)
	return ret0, ret1
}

// FindByIDService indicates an expected call of FindByIDService.
func (mr *MockUserDomainServiceMockRecorder) FindByIDService(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDService", reflect.TypeOf((*MockUserDomainService)(nil).FindByIDService), id)
}

// LoginUserService mocks base method.
func (m *MockUserDomainService) LoginUserService(userDomain model.UserDomainInterface) (model.UserDomainInterface, string, *rest_err.RestErr) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUserService", userDomain)
	ret0, _ := ret[0].(model.UserDomainInterface)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*rest_err.RestErr)
	return ret0, ret1, ret2
}

// LoginUserService indicates an expected call of LoginUserService.
func (mr *MockUserDomainServiceMockRecorder) LoginUserService(userDomain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUserService", reflect.TypeOf((*MockUserDomainService)(nil).LoginUserService), userDomain)
}

// UpdateService mocks base method.
func (m *MockUserDomainService) UpdateService(arg0 string, arg1 model.UserDomainInterface) *rest_err.RestErr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0, arg1)
	ret0, _ := ret[0].(*rest_err.RestErr)
	return ret0
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockUserDomainServiceMockRecorder) UpdateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockUserDomainService)(nil).UpdateService), arg0, arg1)
}

